package com.heaven.adsconfig.firebase

import android.util.Log
import com.google.firebase.Firebase
import com.google.firebase.remoteconfig.FirebaseRemoteConfig
import com.google.firebase.remoteconfig.remoteConfig
import com.heaven.adsconfig.core.AdsMode
import kotlinx.coroutines.tasks.await

/**
 * Provider ch·ªãu tr√°ch nhi·ªám fetch v√† cung c·∫•p JSON config t·ª´ Firebase Remote Config.
 * H·ªó tr·ª£ c·∫£ 2 ch·∫ø ƒë·ªô: FULL_ADS v√† NORMAL_ADS.
 */
object FirebaseRemoteConfigProvider {

    private const val TAG = "FirebaseRCProvider"

    private val remoteConfig: FirebaseRemoteConfig by lazy {
        Firebase.remoteConfig.apply {
            // T√πy ch·ªçn: thi·∫øt l·∫≠p interval fetch th·∫•p h∆°n trong qu√° tr√¨nh dev
            setConfigSettingsAsync(
                com.google.firebase.remoteconfig.FirebaseRemoteConfigSettings.Builder()
                    .setMinimumFetchIntervalInSeconds(0)
                    .build()
            )
        }
    }

    /**
     * L·∫•y JSON t·ª´ Firebase Remote Config theo mode.
     *
     * @param mode AdsMode (FULL_ADS ho·∫∑c NORMAL_ADS)
     * @return Chu·ªói JSON ho·∫∑c null n·∫øu l·ªói.
     */
    suspend fun fetchAdsConfigJson(mode: AdsMode): String? {
        try {
            // 1Ô∏è‚É£ X√°c ƒë·ªãnh key theo mode
            val key = when (mode) {
                AdsMode.FULL_ADS -> "ads_config_full_ads"
                AdsMode.NORMAL_ADS -> "ads_config_normal"
            }

            Log.d(TAG, "üöÄ B·∫Øt ƒë·∫ßu fetch Remote Config cho key: $key")

            // 2Ô∏è‚É£ Fetch + Activate
            val updated = remoteConfig.fetchAndActivate().await()
            Log.d(TAG, "üîÅ FetchAndActivate completed. Updated: $updated")

            // 3Ô∏è‚É£ Log to√†n b·ªô RC keys
            val allKeys = remoteConfig.all
            Log.d(TAG, "üì¶ Remote Config Data Dump (${allKeys.size} keys):")
            for ((k, v) in allKeys) {
                Log.d(TAG, "‚û°Ô∏è Key: $k | Value: ${v.asString()}")
            }

            // 4Ô∏è‚É£ L·∫•y JSON t·ª´ key t∆∞∆°ng ·ª©ng
            var json = remoteConfig.getString(key)
            if (json.isNullOrEmpty() || json == "{}") {
                Log.w(TAG, "‚ö†Ô∏è RC key '$key' r·ªóng, th·ª≠ fallback sang 'ads_config_normal'")
                json = remoteConfig.getString("ads_config_normal")
            }

            // 5Ô∏è‚É£ Log k·∫øt qu·∫£ cu·ªëi c√πng
            Log.d(TAG, "‚úÖ RC JSON ($key): $json")
            return json

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå L·ªói khi fetch Remote Config: ${e.message}", e)
        }
        return null
    }
}
